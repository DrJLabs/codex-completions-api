/**
 * Codex App Server JSON-RPC bindings for chat.
 *
 * Generated by scripts/jsonrpc/render-schema.mjs using @openai/codex@0.53.0.
 * Do not edit this file directly; regenerate instead to pick up upstream schema changes.
 */

export const JSONRPC_VERSION = "2.0" as const;
export const CODEX_CLI_VERSION = "0.53.0" as const;

export type JsonRpcId = number | string;

export interface JsonRpcBaseEnvelope {
  jsonrpc: typeof JSONRPC_VERSION;
}

export interface JsonRpcRequest<Method extends JsonRpcMethod, Params> extends JsonRpcBaseEnvelope {
  id: JsonRpcId;
  method: Method;
  params: Params;
}

export interface JsonRpcSuccessResponse<Result> extends JsonRpcBaseEnvelope {
  id: JsonRpcId;
  result: Result;
}

export interface JsonRpcErrorObject {
  code: number | string;
  message: string;
  data?: unknown;
}

export interface JsonRpcErrorResponse extends JsonRpcBaseEnvelope {
  id: JsonRpcId;
  error: JsonRpcErrorObject;
}

export type JsonRpcResponse<Result> = JsonRpcSuccessResponse<Result> | JsonRpcErrorResponse;

export type JsonRpcMethod = "initialize" | "sendUserTurn" | "sendUserMessage";

export type JsonRpcNotificationMethod =
  | "agentMessageDelta"
  | "agentMessage"
  | "tokenCount"
  | "requestTimeout";

export interface ClientInfo {
  name: string;
  version?: string;
  capabilities?: Record<string, unknown>;
  [key: string]: unknown;
}

export interface InitializeParams {
  client_info: ClientInfo;
  capabilities?: Record<string, unknown>;
  [key: string]: unknown;
}

export interface InitializeResult {
  advertised_models?: string[];
  features?: Record<string, unknown>;
  [key: string]: unknown;
}

export interface SendUserTurnParams {
  conversation_id?: string;
  conversationId?: string;
  request_id?: string;
  requestId?: string;
  metadata?: Record<string, unknown> | null;
  [key: string]: unknown;
}

export interface SendUserTurnResult {
  conversation_id?: string;
  conversationId?: string;
  [key: string]: unknown;
}

export interface SendUserMessageParams {
  conversation_id: string;
  request_id: string;
  text: string;
  metadata?: Record<string, unknown> | null;
  stream?: boolean;
  include_usage?: boolean;
  temperature?: number;
  top_p?: number;
  max_output_tokens?: number;
  tools?: unknown;
  response_format?: unknown;
  [key: string]: unknown;
}

export type FinishReason =
  | "stop"
  | "length"
  | "content_filter"
  | "tool_calls"
  | "function_call"
  | string;

export interface TokenUsage {
  prompt_tokens?: number;
  completion_tokens?: number;
  total_tokens?: number;
  [key: string]: unknown;
}

export interface SendUserMessageResult {
  finish_reason?: FinishReason;
  status?: FinishReason;
  usage?: TokenUsage;
  response?: unknown;
  [key: string]: unknown;
}

export interface NotificationContextPayload {
  conversation_id?: string;
  conversationId?: string;
  request_id?: string;
  requestId?: string;
  conversation?: { id?: string | null } | null;
  context?: { conversation_id?: string | null; request_id?: string | null } | null;
  [key: string]: unknown;
}

export interface ToolCallFunctionDelta {
  name?: string;
  arguments?: string;
  arguments_chunk?: string;
  argumentsChunk?: string;
  [key: string]: unknown;
}

export interface ToolCallDelta {
  index?: number;
  id?: string;
  tool_call_id?: string;
  toolCallId?: string;
  type?: string;
  function?: ToolCallFunctionDelta;
  parallel_tool_calls?: boolean;
  parallelToolCalls?: boolean;
  [key: string]: unknown;
}

export interface ToolCallFunction {
  name?: string;
  arguments?: string;
  [key: string]: unknown;
}

export interface ToolCall {
  index?: number;
  id?: string;
  type?: string;
  function?: ToolCallFunction;
  [key: string]: unknown;
}

export interface FunctionCall {
  name?: string;
  arguments?: string;
  [key: string]: unknown;
}

export interface AgentContentPayload {
  text?: string;
  content?: string;
  type?: string;
  [key: string]: unknown;
}

export type AgentContent = string | AgentContentPayload | Array<AgentContentPayload> | null;

export type AgentMessageDelta =
  | string
  | ({
      role?: string;
      content?: AgentContent;
      text?: string | null;
      metadata?: Record<string, unknown> | null;
      tool_calls?: ToolCallDelta[] | null;
      toolCalls?: ToolCallDelta[] | null;
      parallel_tool_calls?: boolean;
      parallelToolCalls?: boolean;
      [key: string]: unknown;
    } & Record<string, unknown>);

export interface AgentMessageDeltaParams extends NotificationContextPayload {
  delta: AgentMessageDelta;
  [key: string]: unknown;
}

export interface AssistantMessage {
  role: string;
  content?: AgentContent;
  tool_calls?: ToolCall[] | null;
  toolCalls?: ToolCall[] | null;
  function_call?: FunctionCall | null;
  functionCall?: FunctionCall | null;
  metadata?: Record<string, unknown> | null;
  [key: string]: unknown;
}

export interface AgentMessageParams extends NotificationContextPayload {
  message: AssistantMessage;
  parallel_tool_calls?: boolean;
  parallelToolCalls?: boolean;
  [key: string]: unknown;
}

export interface TokenCountParams extends NotificationContextPayload {
  prompt_tokens?: number;
  completion_tokens?: number;
  total_tokens?: number;
  finish_reason?: FinishReason;
  reason?: string;
  token_limit_reached?: boolean;
  [key: string]: unknown;
}

export interface RequestTimeoutParams extends NotificationContextPayload {
  reason?: string;
  [key: string]: unknown;
}

export interface JsonRpcNotification<Method extends JsonRpcNotificationMethod, Params>
  extends JsonRpcBaseEnvelope {
  method: Method;
  params: Params;
}

export type AgentMessageDeltaNotification = JsonRpcNotification<
  "agentMessageDelta",
  AgentMessageDeltaParams
>;

export type AgentMessageNotification = JsonRpcNotification<"agentMessage", AgentMessageParams>;

export type TokenCountNotification = JsonRpcNotification<"tokenCount", TokenCountParams>;

export type RequestTimeoutNotification = JsonRpcNotification<
  "requestTimeout",
  RequestTimeoutParams
>;

export type ChatNotification =
  | AgentMessageDeltaNotification
  | AgentMessageNotification
  | TokenCountNotification
  | RequestTimeoutNotification;

function isObject(value: unknown): value is Record<string, unknown> {
  return typeof value === "object" && value !== null;
}

function pickString(value: unknown): string | null {
  return typeof value === "string" && value.length > 0 ? value : null;
}

function pickNumber(value: unknown): number | null {
  return typeof value === "number" && Number.isFinite(value) ? value : null;
}

function extractKey(value: Record<string, unknown>, keys: string[]): string | null {
  for (const key of keys) {
    if (!Object.prototype.hasOwnProperty.call(value, key)) continue;
    const maybe = pickString(value[key]);
    if (maybe) return maybe;
  }
  return null;
}

function hasConversationIdentifiers(params: NotificationContextPayload): boolean {
  if (!isObject(params)) return false;
  if (pickString(params.conversation_id)) return true;
  if (pickString(params.conversationId)) return true;
  if (isObject(params.conversation) && pickString(params.conversation.id)) return true;
  if (isObject(params.context) && pickString(params.context.conversation_id)) return true;
  if (pickString(params.request_id)) return true;
  if (pickString(params.requestId)) return true;
  return false;
}

export function extractConversationId(params: NotificationContextPayload): string | null {
  if (!isObject(params)) return null;
  return (
    pickString(params.conversation_id) ||
    pickString(params.conversationId) ||
    (isObject(params.conversation) ? pickString(params.conversation.id) : null) ||
    (isObject(params.context) ? pickString(params.context.conversation_id) : null) ||
    null
  );
}

export function extractRequestId(params: NotificationContextPayload): string | null {
  if (!isObject(params)) return null;
  return (
    pickString(params.request_id) ||
    pickString(params.requestId) ||
    (isObject(params.context) ? pickString(params.context.request_id) : null) ||
    null
  );
}

export function isInitializeResult(value: unknown): value is InitializeResult {
  if (!isObject(value)) return false;
  if (value.advertised_models && !Array.isArray(value.advertised_models)) return false;
  return true;
}

export function isSendUserTurnResult(value: unknown): value is SendUserTurnResult {
  if (!isObject(value)) return false;
  const conv =
    pickString(value.conversation_id) ||
    pickString(value.conversationId) ||
    (isObject(value.context)
      ? pickString((value.context as Record<string, unknown>).conversation_id)
      : null);
  return conv !== null;
}

export function isSendUserMessageResult(value: unknown): value is SendUserMessageResult {
  if (!isObject(value)) return false;
  const fr = value.finish_reason ?? value.status;
  if (fr !== undefined && typeof fr !== "string") return false;
  if (value.usage && !isObject(value.usage)) return false;
  return true;
}

export function isAgentMessageDeltaNotification(
  value: unknown
): value is AgentMessageDeltaNotification {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (value.method !== "agentMessageDelta") return false;
  if (!isObject(value.params)) return false;
  if (!hasConversationIdentifiers(value.params as NotificationContextPayload)) return false;
  if (!Object.prototype.hasOwnProperty.call(value.params, "delta")) return false;
  return true;
}

export function isAgentMessageNotification(value: unknown): value is AgentMessageNotification {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (value.method !== "agentMessage") return false;
  if (!isObject(value.params)) return false;
  if (!hasConversationIdentifiers(value.params as NotificationContextPayload)) return false;
  const { message } = value.params as Record<string, unknown>;
  if (!isObject(message)) return false;
  if (!pickString(message.role)) return false;
  return true;
}

export function isTokenCountNotification(value: unknown): value is TokenCountNotification {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (value.method !== "tokenCount") return false;
  if (!isObject(value.params)) return false;
  if (!hasConversationIdentifiers(value.params as NotificationContextPayload)) return false;
  const ctx = value.params as Record<string, unknown>;
  const hasPrompt = pickNumber(ctx.prompt_tokens) !== null;
  const hasCompletion = pickNumber(ctx.completion_tokens) !== null;
  const hasTotal = pickNumber(ctx.total_tokens) !== null;
  if (!(hasPrompt || hasCompletion || hasTotal)) return false;
  return true;
}

export function isRequestTimeoutNotification(value: unknown): value is RequestTimeoutNotification {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (value.method !== "requestTimeout") return false;
  if (!isObject(value.params)) return false;
  return hasConversationIdentifiers(value.params as NotificationContextPayload);
}

export function isJsonRpcNotification(value: unknown): value is ChatNotification {
  return (
    isAgentMessageDeltaNotification(value) ||
    isAgentMessageNotification(value) ||
    isTokenCountNotification(value) ||
    isRequestTimeoutNotification(value)
  );
}

export function isJsonRpcErrorResponse(value: unknown): value is JsonRpcErrorResponse {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (!Object.prototype.hasOwnProperty.call(value, "error")) return false;
  if (!isObject(value.error)) return false;
  if (!("message" in value.error) || typeof value.error.message !== "string") return false;
  return true;
}

export function isJsonRpcSuccessResponse<Result>(
  value: unknown
): value is JsonRpcSuccessResponse<Result> {
  if (!isObject(value)) return false;
  if (value.jsonrpc !== JSONRPC_VERSION) return false;
  if (!Object.prototype.hasOwnProperty.call(value, "result")) return false;
  return true;
}
