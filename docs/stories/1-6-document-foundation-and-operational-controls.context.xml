<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>6</storyId>
    <title>Document foundation and operational controls</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-10-31T18:38:28.250551+00:00</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/1-6-document-foundation-and-operational-controls.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>As a product operator,</asA>
    <iWant>I want runbooks and docs explaining the new worker controls,</iWant>
    <soThat>so that teams know how to configure environments during later rollout.</soThat>
    <tasks>- [ ] (AC #1) Update runbook sections covering feature flag toggles, CLI pinning, CODEX_HOME, and readiness/liveness probe procedures for Compose, systemd, and Traefik, ensuring citations to migration/architecture docs stay current.
  - [ ] (AC #1 Testing) Execute `npm run lint:runbooks` to confirm formatting and doc lint pass after updates.
- [ ] (AC #2) Produce environment matrix capturing dev/staging/prod configuration deltas (feature flag defaults, CLI version, probe expectations, smoke commands) and cross-verify against `.env`, `.env.dev`, and tech stack docs.
  - [ ] (AC #2 Testing) Cross-check matrix values by diffing with `docs/app-server-migration` sections and env samples to ensure parity (manual review noted in Dev Notes).
- [ ] (AC #3) Append change-log entry that summarizes operational readiness, references updated runbook sections, and links to parity evidence captured in Story 1.5 outputs.
  - [ ] (AC #3 Testing) Review the updated change-log entry with an ops checklist to confirm it references the new runbook sections and Story 1.5 probe evidence before marking complete.</tasks>
  </story>

  <acceptanceCriteria>1. Runbook updates describe the `PROXY_USE_APP_SERVER` rollout procedure (toggle defaults, smoke requirements, probe expectations) and cite feature-flag, CLI, and health probe guidance sourced from the migration playbook and architecture decisions. [Source: docs/app-server-migration/codex-completions-api-migration.md] [Source: docs/architecture.md#decision-summary]
2. Environment matrix enumerates required configuration for dev, staging, and production (feature flag, CLI version, CODEX_HOME mount, probe endpoints) and aligns with documented tech stack and existing `.env` samples. [Source: docs/app-server-migration/codex-completions-api-migration.md] [Source: docs/bmad/architecture/tech-stack.md]
3. Migration change log highlights operational readiness (flag status, runbook availability, parity checkpoints) for partner teams, referencing the Epic 1 documentation scope and prior readiness story outputs. [Source: docs/epics.md#story-16-document-foundation-and-operational-controls] [Source: docs/stories/1-5-wire-readiness-and-liveness-probes-to-worker-state.md#dev-notes]</acceptanceCriteria>

  <artifacts>
    <docs>- path: docs/epics.md | title: codex-completions-api - Epic Breakdown | section: Story 1.6: Document foundation and operational controls | snippet: Story 1.6 requires fresh runbook coverage for the app-server controls, an environment matrix across dev, staging, and production, and a change log highlighting rollout readiness so partner teams can follow the migration plan.
- path: docs/PRD.md | title: codex-completions-api Product Requirements Document (PRD) | section: Functional Requirements – Worker Lifecycle & Controls | snippet: FR005–FR007 and FR015 mandate a documented feature flag, supervised worker readiness/liveness probes, and runbook updates so operators can manage cutover without regressions.
- path: docs/architecture.md | title: Decision Architecture | section: Decision Summary – Health & Lifecycle | snippet: The Health & Lifecycle decision extends `/healthz` and `/readyz` to demand worker handshake readiness and graceful drains, tying documentation directly to the supervised worker controls.
- path: docs/app-server-migration/codex-completions-api-migration.md | title: Migrating codex-completions-api to codex app-server | section: M. Runbook checklist updates | snippet: The runbook checklist captures environment monitor requirements and a feature-flag defaults table operators must follow when updating staging, production, and dev stacks.
- path: docs/bmad/architecture/tech-stack.md | title: Tech Stack — Codex Completions API | section: Testing & QA | snippet: Testing guidance calls for running smoke harnesses (`npm run smoke:dev` / `npm run smoke:prod`) before `npm run verify:all`, reinforcing that documentation updates should reference these verification steps.
- path: docs/bmad/architecture/source-tree.md | title: Source Tree — Codex Completions API | section: Top-Level | snippet: The source-tree map shows documentation lives under `docs/` with migration guides and architecture files, helping authors place new runbook material without breaking structure.
- path: docs/stories/1-5-wire-readiness-and-liveness-probes-to-worker-state.md | title: Story 1.5 – Wire readiness and liveness probes to worker state | section: Dev Notes | snippet: Prior story learnings detail the supervisor APIs, probe behavior, and runbook entries that this documentation effort must reference instead of recreating from scratch.
- path: docs/implementation-readiness-report-2025-10-30.md | title: Implementation Readiness Assessment Report | section: Document Analysis Summary | snippet: The readiness report confirms PRD, architecture, and migration docs already align on observability and rollout requirements, providing baseline evidence for the new documentation package.</docs>
    <code>- path: src/config/index.js | kind: config | symbol: config.PROXY_USE_APP_SERVER | lines: 1-60 | reason: Centralizes the app-server feature flag and supervisor defaults that the environment matrix and documentation must reference.
- path: src/services/backend-mode.js | kind: service | symbol: selectBackendMode | lines: 1-80 | reason: Runtime helper that reads PROXY_USE_APP_SERVER to toggle proto vs. app-server; documentation should point operators here instead of duplicating logic.
- path: Dockerfile | kind: docker | symbol: codex app-server bake | lines: 1-34 | reason: Shows how the image pins @openai/codex and verifies `codex app-server --help`, supporting the runbook instructions for CLI availability.
- path: docker-compose.yml | kind: compose | symbol: services.app.environment | lines: 1-60 | reason: Defines production environment variables (CODEX_HOME, PROXY_* flags) that the environment matrix and rollout docs must keep in sync.
- path: .env.example | kind: env | symbol: PROXY_USE_APP_SERVER default | lines: 1-40 | reason: Documents local/prod defaults for the feature flag and supervisor tuning; runbook updates must align with these comments.
- path: .env.dev | kind: env | symbol: PROXY_USE_APP_SERVER (dev) | lines: 1-40 | reason: Dev stack configuration referenced by the environment matrix and smoke prerequisites.
- path: scripts/prod-smoke.sh | kind: script | symbol: codex app-server availability check | lines: 1-110 | reason: Smoke harness that executes `codex app-server --help` before probing health; documentation should direct operators to run it after updates.
- path: scripts/dev-smoke.sh | kind: script | symbol: dev smoke workflow | lines: 1-110 | reason: Mirrors the production smoke process for dev stacks, ensuring runbook guidance covers both paths.
- path: src/routes/health.js | kind: route | symbol: healthRouter | lines: 1-120 | reason: Exposes `/healthz`, `/readyz`, and `/livez`; documentation must describe probe expectations and cite this implementation when outlining operational checks.</code>
    <dependencies>node:
  - @openai/codex@0.53.0 (bundles the app-server binary baked into Docker images for CLI availability checks)
  - express@^4.21.2 (HTTP framework exposing `/healthz`, `/readyz`, and `/livez` used throughout the documentation)
  - nanoid@^5.1.6 (request ID helper referenced in operational logging guidance)
  - vitest@^4.0.3 (unit and integration harness the runbook instructs teams to execute during verification)
  - @playwright/test@^1.56.1 (E2E framework supporting streaming and smoke validations cited in testing standards)</dependencies>
  </artifacts>

  <constraints>- Keep documentation synchronized with the authoritative configuration surfaces: `src/config/index.js`, `.env.example`, `.env.dev`, and `docker-compose.yml`; never duplicate values without citing these files.
- Document CLI packaging and smoke procedures exactly as enforced by the Dockerfile and `scripts/*-smoke.sh` so operability matches current automation.
- Reference Story 1.5 outputs for probe behavior and avoid inventing new readiness guidance; reuse supervisor APIs and testing patterns.
- Call out the requirement that `.codex-api/` remains writable across environments, matching architecture and compose guidance.</constraints>
  <interfaces>- name: PROXY_USE_APP_SERVER | kind: environment flag | signature: boolean env var defined in `src/config/index.js` (default "false") toggles proto vs. app-server backend; documented in `.env.example` and `.env.dev`.
- name: codex app-server smoke check | kind: CLI command | signature: `docker run --rm codex-completions-api:latest codex app-server --help` (invoked by `scripts/prod-smoke.sh` / `scripts/dev-smoke.sh`) to verify CLI packaging before rollout.
- name: GET /healthz | kind: HTTP endpoint | signature: GET `/healthz` → readiness/liveness payload including supervisor state, sourced from `src/routes/health.js`; runbook must describe expected responses when probes gate traffic.</interfaces>
  <tests>
    <standards>Follow the documented verification chain: run smoke scripts (`npm run smoke:dev` / `npm run smoke:prod`) to confirm CLI packaging and probes before executing `npm run verify:all`, which runs format, lint, unit, integration, and Playwright suites.</standards>
    <locations>scripts/prod-smoke.sh; scripts/dev-smoke.sh; tests/unit/**; tests/integration/**; tests/e2e/**</locations>
    <ideas>- AC #1: After updating runbooks, capture the results of `npm run smoke:prod` and record evidence in the change log.
- AC #2: Run `npm run smoke:dev` followed by a targeted `npm run test:integration -- tests/integration/health.probes.app-server.int.test.js` to ensure readiness/liveness documentation aligns with current behavior.
- AC #3: Execute `npm run lint:runbooks` and attach the output to the change-log update so reviewers can confirm formatting checks passed.</ideas>
  </tests>
</story-context>
