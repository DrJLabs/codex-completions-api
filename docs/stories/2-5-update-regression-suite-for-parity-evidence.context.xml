<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>5</storyId>
    <title>Update regression suite for parity evidence</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-11-01T22:52:17Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/2-5-update-regression-suite-for-parity-evidence.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>As a QA engineer. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#story)</asA>
    <iWant>I want automated regression tests capturing proto vs app-server behavior. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#story)</iWant>
    <soThat>So that we can prove no regressions before rollout. [Source](docs/epics.md#story-25-update-regression-suite-for-parity-evidence) [Source](docs/PRD.md#functional-requirements)</soThat>
    <tasks>
- [ ] (AC #1) Expand deterministic parity coverage across unit and integration suites using existing JSON-RPC shims and the parity harness. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #1) Add or refine parity scenarios in `tests/parity/` and `tests/integration/` to cover baseline, streaming delta, and error/tool-call cases. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #1) Regenerate transcripts via `npm run transcripts:generate` and validate diffs with `npm run test:parity` before committing fixture updates. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
- [ ] (AC #2) Ensure `npm run test:integration`, `npm test`, and related scripts exercise the app-server path with refreshed fixtures and document the expected commands. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #2) Update integration/E2E setup so the app-server transport is active during regression runs. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #2) Capture command outputs (or CI references) proving `npm run test:integration`, `npm test`, and `npm run test:parity` succeed after fixture rotation. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
- [ ] (AC #3) Publish parity comparison artifacts and CLI metadata alongside documentation updates so audit trails remain complete. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #3) Update parity documentation with new scenario coverage, CLI version stamps, and artifact locations. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
  - [ ] (AC #3) Verify CI uploads parity diff outputs and metadata (e.g., transcripts manifest) for release evidence. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#tasks--subtasks)
    </tasks>
  </story>

  <acceptanceCriteria>
1. Unit and integration suites run against deterministic JSON-RPC mocks that cover baseline, streaming, and error parity scenarios identified for Story 2.5, preventing regressions before rollout. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#acceptance-criteria) [Source](docs/epics.md#story-25-update-regression-suite-for-parity-evidence) [Source](docs/test-design-epic-2.md#test-coverage-plan)
2. `npm run test:integration`, `npm test`, and `npm run test:parity` execute the app-server path using refreshed fixtures, producing passing results after transcripts regeneration. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#acceptance-criteria) [Source](docs/tech-spec-epic-2.md#acceptance-criteria-authoritative) [Source](docs/openai-endpoint-golden-parity.md#81-capture-workflow-proto--app-server-parity)
3. CI and documentation capture parity comparison artifacts and CLI metadata (including fixture versions) in the repo-standard locations, keeping parity evidence audit-ready. [Source](docs/stories/2-5-update-regression-suite-for-parity-evidence.md#acceptance-criteria) [Source](docs/app-server-migration/codex-completions-api-migration.md#k-parity-fixture-maintenance-workflow) [Source](docs/PRD.md#functional-requirements)
  </acceptanceCriteria>

  <artifacts>
    <docs>
- path: docs/epics.md | title: codex-completions-api - Epic Breakdown | section: Story 2.5: Update regression suite for parity evidence | snippet: Defines the QA-focused goal and acceptance criteria requiring deterministic regression suites, refreshed scripts, and parity artifacts before rollout.
- path: docs/tech-spec-epic-2.md | title: Epic Technical Specification: /v1/chat/completions JSON-RPC Parity | section: Acceptance Criteria (Authoritative) | snippet: AC #5 mandates that integration, E2E, and parity harness runs (`npm run test:integration`, `npm test`, `npm run test:parity`) deliver artifact evidence for Story 2.5.
- path: docs/PRD.md | title: codex-completions-api Product Requirements Document | section: FR013–FR015 | snippet: FR013–FR015 require updated automated suites, smoke/CI jobs targeting the app-server, and refreshed runbooks documenting parity evidence.
- path: docs/openai-endpoint-golden-parity.md | title: OpenAI Endpoint Parity &amp; Golden Transcripts — Canonical Spec Companion | section: 8.1 Capture workflow (proto ↔ app-server parity) | snippet: Details the transcript regeneration, parity diff, CLI metadata stamping, and smoke verification steps the regression suite must follow.
- path: docs/app-server-migration/codex-completions-api-migration.md | title: Migrating codex-completions-api to codex app-server | section: K. Parity fixture maintenance workflow | snippet: Outlines the ordered workflow for regenerating fixtures, running `npm run test:parity`, capturing `npm run test:integration`/`npm test`, and logging CLI versions.
- path: docs/test-design-epic-2.md | title: Test Design: Epic 2 - /v1/chat/completions JSON-RPC Parity | section: P0 &amp; P1 test coverage | snippet: Elevates baseline parity, streaming delta, and error suites to P0, and transcript regeneration/version enforcement to P1 for Story 2.5.
- path: docs/architecture.md | title: Decision Architecture | section: Consistency Rules / Test Strategy | snippet: Reinforces the unit → integration → Playwright E2E cadence and documentation expectations the regression suite must preserve.
- path: stories/2-4-align-error-handling-and-retries.md | title: Story 2.4: Align error handling and retries | section: Completion Notes List | snippet: lists transport modules and fixtures updated in Story 2.4 that this story must reuse when expanding regression scenarios.
    </docs>
    <code>
- path: tests/parity/chat-fixture-parity.test.mjs | type: file | lineHint: describe("chat fixture parity") | reason: Enforces proto vs. app transcript equality for every REQUIRED_TRANSCRIPTS scenario and should be extended with any new fixtures.
- path: scripts/generate-chat-transcripts.mjs | type: file | lineHint: function generateTranscripts | reason: Generates paired transcripts with metadata (backend, storage, CLI version) that CI artifacts must record for parity evidence.
- path: tests/integration/chat-jsonrpc.int.test.js | type: file | lineHint: describe("chat JSON-RPC parity") | reason: Houses deterministic integration cases for JSON-RPC parity; add baseline/streaming/error regressions surfaced in Story 2.5.
- path: tests/unit/services/json-rpc-transport.spec.js | type: file | lineHint: describe("mapTransportError") | reason: Provides unit assertions for transport mappings; expand coverage when adding new parity scenarios or worker states.
- path: scripts/fake-codex-jsonrpc.js | type: file | lineHint: exports.fakeResponses | reason: JSON-RPC shim used to simulate proto/app-server responses in integration and parity tests.
- path: package.json | type: file | lineHint: scripts section | reason: Defines regression scripts (`npm run transcripts:generate`, `npm run test:parity`, `npm run test:integration`, `npm test`) that must stay in sync with documentation.
    </code>
    <dependencies>
- node | version: &gt;=22 (package.json engines)
- runtime packages: `@openai/codex@0.53.0`, `express`, `nanoid`
- qa toolchain: `vitest`, `@vitest/coverage-v8`, `@playwright/test`, `eslint` + plugins, `prettier`
    </dependencies>
  </artifacts>

  <constraints>
- Preserve deterministic proto vs. app transcripts with metadata (scenario, backend, CLI version) per parity workflow; failing to regenerate breaks Story 2.5 evidence. [Source](docs/openai-endpoint-golden-parity.md#81-capture-workflow-proto--app-server-parity)
- Record parity outputs, CLI version, and test logs in repo-standard locations as mandated by the migration runbook and PRD FR013–FR015. [Source](docs/app-server-migration/codex-completions-api-migration.md#k-parity-fixture-maintenance-workflow) [Source](docs/PRD.md#functional-requirements)
- Keep `@openai/codex` pinned to 0.53.0 and reuse the existing harness/scripts instead of introducing new tooling. [Source](package.json) [Source](docs/test-design-epic-2.md#test-coverage-plan)
- Maintain the unit → integration → Playwright verification cadence and document updates for any flag or workflow changes. [Source](docs/architecture.md#consistency-rules) [Source](docs/bmad/architecture/tech-stack.md#testing--qa)
  </constraints>
  <interfaces>
    <services>- path: scripts/generate-chat-transcripts.mjs | contract: `npm run transcripts:generate` captures proto/app fixtures, stamps metadata, and must be run before parity/CI evidence collection. | path: scripts/generate-chat-transcripts.mjs</services>
    <services>- path: tests/parity/chat-fixture-parity.test.mjs | contract: `npm run test:parity` loads REQUIRED_TRANSCRIPTS and ensures proto/app JSON bodies match after metadata stripping. | path: tests/parity/chat-fixture-parity.test.mjs</services>
    <services>- path: package.json#scripts | contract: Regression flow relies on `npm run test:integration`, `npm test`, and `npm run test:parity` to exercise the app-server path and emit artifacts. | path: package.json</services>
  </interfaces>
  <tests>
    <standards>Follow Epic 2 test plan: parity baseline, streaming delta, and error suites run as P0; transcript regeneration and version enforcement tracked as P1, with outputs archived per migration workflow. [Source](docs/test-design-epic-2.md#test-coverage-plan) [Source](docs/app-server-migration/codex-completions-api-migration.md#k-parity-fixture-maintenance-workflow)</standards>
    <locations>tests/parity; tests/integration/chat-jsonrpc.int.test.js; tests/unit/services/json-rpc-transport.spec.js; test-results/chat-completions/{proto,app}</locations>
    <ideas>
- AC #1: Add parity harness coverage for new scenarios (e.g., streaming tool calls, failure fixtures) ensuring proto/app JSON bodies remain identical.
- AC #2: Extend integration tests to execute with `PROXY_USE_APP_SERVER=true`, capturing logs/attachments for `npm run test:integration`, `npm test`, and parity command outputs.
- AC #3: Automate artifact publication (transcript manifests, CLI version stamps) and add checks that CI uploads the generated evidence bundle.
    </ideas>
  </tests>
</story-context>
